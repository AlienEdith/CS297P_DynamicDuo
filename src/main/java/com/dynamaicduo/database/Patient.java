package com.dynamicduo.database;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.Map;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER_PATIENT_TABLE_NAME")
public class Patient {

    private static final String PATIENT_TABLE_NAME = System.getenv("PATIENT_TABLE");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger LOG = LogManager.getLogger(this.getClass());
    // private Logger logger = Logger.getLogger(this.getClass());

    private String userId;
    private String recordTime;

    @DynamoDBHashKey(attributeName = "userId")
    public String getUserId() {
        return this.userId;
    }
    public void setUserId(String userId) {
        this.userId = userId;
    }

    @DynamoDBRangeKey(attributeName = "recordTime")
    public String getRecordTime() {
        return this.recordTime;
    }
    public void setRecordTime(String recordTime) {
        this.recordTime = recordTime;
    }

    // public void setAttributes(Map<String, Object> attributes){
    //     this.attributes = attributes;
    // }
    // @DynamoDBAttribute(attributeName = "price")
    // public Float getPrice() {
    //     return this.price;
    // }
    // public void setPrice(Float price) {
    //     this.price = price;
    // }

    public Patient() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PATIENT_TABLE_NAME))
            .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Patient [id=%s]", this.userId);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(PATIENT_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public Patient getUser(String userId) throws IOException {
        Patient patient = null;

        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));
        attributeValue.put(":recordTime", new AttributeValue().withS("PATIENT"));

        DynamoDBQueryExpression<Patient> queryExp = new DynamoDBQueryExpression<Patient>()
            .withKeyConditionExpression("userId = :userId and recordTime = :recordTime")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Patient> result = this.mapper.query(Patient.class, queryExp);
        if (result.size() > 0) patient = result.get(0);

        return patient;
    }

    public void save(Map<String, Object> attributes) throws IOException {
        Map<String,AttributeValue> attributeValue = new HashMap<String,AttributeValue>();
        for(String key : attributes.keySet()){
            attributeValue.put(key, new AttributeValue().withS(attributes.get(key)));

        }
        // attributeValue.put("recordTime", new AttributeValue().withS("what"));
        client.putItem(PATIENT_TABLE_NAME, attributeValue);
        
    }

    // public List<>

    public Boolean deleteUser(String userId) throws IOException {

        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));

        DynamoDBQueryExpression<Patient> queryExp = new DynamoDBQueryExpression<Patient>()
            .withKeyConditionExpression("userId = :userId")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Patient> patients = this.mapper.query(Patient.class, queryExp);
        
        if(patients.size() == 0)    return false;

        this.mapper.batchDelete(patients);
        
        return true;
    }

}
