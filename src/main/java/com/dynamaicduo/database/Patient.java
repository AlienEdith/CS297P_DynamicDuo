package com.dynamicduo.database;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.Map;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER")
public class Patient {

    private static final String PATIENT_TABLE_NAME = System.getenv("PATIENT_TABLE");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger LOG = LogManager.getLogger(this.getClass());

    private String userId;
    private String recordTime;
    private String email;
    private String username;
    private String dateOfBirth;
    private String gender;
    private String image;

    private List<String> latestFourSymptoms;    
    private List<String> chronicCondition;
    private List<Map<String, String>> emergencyContact;
    
    @DynamoDBHashKey(attributeName = "userId")
    public String getUserId() { return this.userId; }
    public void setUserId(String userId) { this.userId = userId; }

    @DynamoDBRangeKey(attributeName = "recordTime")
    public String getRecordTime() { return this.recordTime; }
    public void setRecordTime(String recordTime) { this.recordTime = recordTime; }

    @DynamoDBAttribute(attributeName = "email")
    public String getEmail() { return this.email; }
    public void setEmail(String email) { this.email = email; }

    @DynamoDBAttribute(attributeName = "username")
    public String getUsername() { return this.username; }
    public void setUsername(String username) { this.username = username; }

    @DynamoDBAttribute(attributeName = "dateOfBirth")
    public String getDateOfBirth() { return this.dateOfBirth; }
    public void setDateOfBirth(String dateOfBirth) { this.dateOfBirth = dateOfBirth; }

    @DynamoDBAttribute(attributeName = "gender")
    public String getGender() { return this.gender; }
    public void setGender(String gender) { this.gender = gender; }

    @DynamoDBAttribute(attributeName = "image")
    public String getImage() { return this.image; }
    public void setImage(String image) { this.image = image; }

    @DynamoDBAttribute(attributeName = "latestFourSymptoms")
    public List<String> getLatestFourSymptoms() { return this.latestFourSymptoms; }
    public void setLatestFourSymptoms(List<String> latestFourSymptoms) { this.latestFourSymptoms = latestFourSymptoms; }

    @DynamoDBAttribute(attributeName = "chronicCondition")
    public List<String> getChronicCondition() { return this.chronicCondition; }
    public void setChronicCondition(List<String> chronicCondition) { this.chronicCondition = chronicCondition; }

    @DynamoDBAttribute(attributeName = "emergencyContact")
    public List<Map<String, String>> getEmergencyContact() { return this.emergencyContact; }
    public void setEmergencyContact(List<Map<String, String>> emergencyContact) { this.emergencyContact = emergencyContact; }

    public Patient() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PATIENT_TABLE_NAME))
            .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Patient [id=%s]", this.userId);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(PATIENT_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public Patient get(String userId) throws IOException {
        Patient patient = null;

        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));
        attributeValue.put(":recordTime", new AttributeValue().withS("PATIENT"));

        DynamoDBQueryExpression<Patient> queryExp = new DynamoDBQueryExpression<Patient>()
            .withKeyConditionExpression("userId = :userId and recordTime = :recordTime")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Patient> result = this.mapper.query(Patient.class, queryExp);
        if (result.size() > 0) patient = result.get(0);

        return patient;
    }

    public Patient save() throws IOException {
        this.mapper.save(this);
        return get(this.userId);
    }

    public Patient update() throws IOException {
        return save();
    }

    public Boolean delete(String userId) throws IOException {

        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));

        DynamoDBQueryExpression<Patient> queryExp = new DynamoDBQueryExpression<Patient>()
            .withKeyConditionExpression("userId = :userId")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Patient> patients = this.mapper.query(Patient.class, queryExp);
        
        if(patients.size() == 0)    return false;

        this.mapper.batchDelete(patients);
        
        return true;
    }

}
