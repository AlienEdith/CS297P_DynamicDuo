package com.dynamicduo.database;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.Map;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER")
public class Symptom {

    private static final String PATIENT_TABLE_NAME = System.getenv("PATIENT_TABLE");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger LOG = LogManager.getLogger(this.getClass());

    private String userId;
    private String recordTime;
    
    @DynamoDBHashKey(attributeName = "userId")
    public String getUserId() { return this.userId; }
    public void setUserId(String userId) { this.userId = userId; }

    @DynamoDBRangeKey(attributeName = "recordTime")
    public String getRecordTime() { return this.recordTime; }
    public void setRecordTime(String recordTime) { this.recordTime = recordTime; }


    public Symptom() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PATIENT_TABLE_NAME))
            .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Symptom [id=%s]", this.userId);
    }

    public Symptom get(String userId, String recordTime) throws IOException {
        Symptom symptom = null;

        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));
        attributeValue.put(":recordTime", new AttributeValue().withS(recordTime));

        DynamoDBQueryExpression<Symptom> queryExp = new DynamoDBQueryExpression<Symptom>()
            .withKeyConditionExpression("userId = :userId and recordTime = :recordTime")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Symptom> result = this.mapper.query(Symptom.class, queryExp);
        if (result.size() > 0) symptom = result.get(0);

        return symptom;
    }
    public boolean delete(String userId, String recordTime) throws IOException {
        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));
        attributeValue.put(":recordTime", new AttributeValue().withS(recordTime));
        DynamoDBQueryExpression<Symptom> queryExp = new DynamoDBQueryExpression<Symptom>()
            .withKeyConditionExpression("userId = :userId")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Symptom> symptoms = this.mapper.query(Symptom.class, queryExp);
        
        if(symptoms.size() == 0)    return false;

        this.mapper.batchDelete(symptoms);

        return true;
    }

}
