package com.dynamicduo.database;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.Map;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER")
public class Report {

    private static final String PATIENT_TABLE_NAME = System.getenv("PATIENT_TABLE");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger LOG = LogManager.getLogger(this.getClass());

    private String userId;
    private String recordTime;

    private String appointmentDate;
    private String reportNotes;
    private String symptomRange;

    private List<String> chiefcomplaintSymptoms;    
    private List<String> otherSymptoms;
    private List<Map<String, String>> reportAttachments;
    
    @DynamoDBHashKey(attributeName = "userId")
    public String getUserId() { return this.userId; }
    public void setUserId(String userId) { this.userId = userId; }

    @DynamoDBRangeKey(attributeName = "recordTime")
    public String getRecordTime() { return this.recordTime; }
    public void setRecordTime(String recordTime) { this.recordTime = recordTime; }

    @DynamoDBAttribute(attributeName = "appointmentDate")
    public String getAppointmentDate() { return this.appointmentDate; }
    public void setAppointmentDate(String appointmentDate) { this.appointmentDate = appointmentDate; }

    @DynamoDBAttribute(attributeName = "symptomRange")
    public String getSymptomRange() { return this.symptomRange; }
    public void setSymptomRange(String symptomRange) { this.symptomRange = symptomRange; }

    @DynamoDBAttribute(attributeName = "chiefcomplaintSymptoms")
    public List<String> getChiefcomplaintSymptoms() { return this.chiefcomplaintSymptoms; }
    public void setChiefcomplaintSymptoms(List<String> chiefcomplaintSymptoms) { this.chiefcomplaintSymptoms = chiefcomplaintSymptoms; }

    @DynamoDBAttribute(attributeName = "otherSymptoms")
    public List<String> getOtherSymptoms() { return this.otherSymptoms; }
    public void setOtherSymptoms(List<String> otherSymptoms) { this.otherSymptoms = otherSymptoms; }

    @DynamoDBAttribute(attributeName = "reportAttachments")
    public List<Map<String, String>> getReportAttachments() { return this.reportAttachments; }
    public void setReportAttachments(List<Map<String, String>> reportAttachments) { this.reportAttachments = reportAttachments; }

    public Report() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PATIENT_TABLE_NAME))
            .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Report [id=%s]", this.userId);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(PATIENT_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public Report get(String userId, String recordTime) throws IOException {
        Report report = null;

        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));
        attributeValue.put(":recordTime", new AttributeValue().withS(recordTime));

        DynamoDBQueryExpression<Report> queryExp = new DynamoDBQueryExpression<Report>()
            .withKeyConditionExpression("userId = :userId and recordTime = :recordTime")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Report> result = this.mapper.query(Report.class, queryExp);
        if (result.size() > 0) report = result.get(0);

        return report;
    }

    public List<Report> list(String userId){
        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":userId", new AttributeValue().withS(userId));
        attributeValue.put(":recordTime", new AttributeValue().withS("REPORT#"));

        DynamoDBQueryExpression<Report> queryExp = new DynamoDBQueryExpression<Report>()
            .withKeyConditionExpression("userId = :userId and begins_with (recordTime, :recordTime)")
            .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Report> result = this.mapper.query(Report.class, queryExp);
        return result;
    }


    public Report save() throws IOException {
        this.mapper.save(this);
        return get(this.userId, this.recordTime);
    }

    public Boolean delete(String userId, String recordTime) throws IOException {

        Report report = get(userId, recordTime);
        
        if(report == null)    return false;

        this.mapper.delete(report);
        
        return true;
    }

}
